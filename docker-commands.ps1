# ====================================================================
# COMANDOS DOCKER PARA ETLFutbol Pipeline
# Ejecutar desde la ra√≠z del proyecto: d:\...\ETLFutbol\
# ====================================================================

Write-Host "üê≥ === COMANDOS DOCKER PARA ETLFutbol ===" -ForegroundColor Green

Write-Host "`nüì¶ 1. CONSTRUIR LA IMAGEN:" -ForegroundColor Yellow
Write-Host "docker build -t etlfutbol:latest -t etlfutbol:v1.0 ." -ForegroundColor Cyan

Write-Host "`nüöÄ 2. EJECUTAR ETL COMPLETO (recomendado):" -ForegroundColor Yellow
Write-Host "docker run --rm --name etlfutbol-run -v `"`$(pwd)/Files:/app/Files`" -v `"`$(pwd)/Graphics:/app/Graphics`" etlfutbol:latest" -ForegroundColor Cyan

Write-Host "`nüîç 3. EJECUTAR EN MODO INTERACTIVO (debug):" -ForegroundColor Yellow
Write-Host "docker run --rm -it --name etlfutbol-debug -v `"`$(pwd)/Files:/app/Files`" -v `"`$(pwd)/Graphics:/app/Graphics`" etlfutbol:latest bash" -ForegroundColor Cyan

Write-Host "`n‚ö° 4. EJECUTAR EN SEGUNDO PLANO:" -ForegroundColor Yellow
Write-Host "docker run -d --name etlfutbol-daemon -v `"`$(pwd)/Files:/app/Files`" -v `"`$(pwd)/Graphics:/app/Graphics`" etlfutbol:latest" -ForegroundColor Cyan

Write-Host "`nüìä 5. SOLO GENERAR GR√ÅFICAS (comando personalizado):" -ForegroundColor Yellow
Write-Host "docker run --rm -v `"`$(pwd)/Files:/app/Files`" -v `"`$(pwd)/Graphics:/app/Graphics`" etlfutbol:latest python -c `"from Extract.FutolGraphics import *; import pandas as pd; df=pd.read_csv('Files/Futbol.csv'); g=FutbolGraphics(df); g.generate_all_graphics()`"" -ForegroundColor Cyan

Write-Host "`nüìã 6. VER LOGS DEL PROCESO:" -ForegroundColor Yellow
Write-Host "docker logs etlfutbol-daemon" -ForegroundColor Cyan
Write-Host "docker logs -f etlfutbol-daemon  # (seguir logs en tiempo real)" -ForegroundColor Gray

Write-Host "`nüîß 7. ACCEDER AL CONTENEDOR:" -ForegroundColor Yellow
Write-Host "docker exec -it etlfutbol-daemon bash" -ForegroundColor Cyan

Write-Host "`n‚èπÔ∏è  8. PARAR Y LIMPIAR CONTENEDORES:" -ForegroundColor Yellow
Write-Host "docker stop etlfutbol-daemon && docker rm etlfutbol-daemon" -ForegroundColor Cyan

Write-Host "`nüßπ 9. LIMPIAR IM√ÅGENES Y CACHE:" -ForegroundColor Yellow
Write-Host "docker image prune -f" -ForegroundColor Cyan
Write-Host "docker system prune -f  # (limpiar todo el sistema)" -ForegroundColor Gray

Write-Host "`nüìã 10. INFORMACI√ìN Y ESTADO:" -ForegroundColor Yellow
Write-Host "docker images | findstr etlfutbol  # Ver im√°genes" -ForegroundColor Cyan
Write-Host "docker ps -a | findstr etlfutbol   # Ver contenedores" -ForegroundColor Cyan
Write-Host "docker inspect etlfutbol:latest    # Detalles de la imagen" -ForegroundColor Cyan

Write-Host "`nüíæ 11. VERIFICAR ARCHIVOS GENERADOS:" -ForegroundColor Yellow
Write-Host "ls ./Graphics/  # Ver gr√°ficas generadas" -ForegroundColor Cyan
Write-Host "ls ./Files/     # Ver archivos de datos y BD" -ForegroundColor Cyan

Write-Host "`nüè• 12. HEALTH CHECK:" -ForegroundColor Yellow
Write-Host "docker run --rm etlfutbol:latest python -c `"import pandas, matplotlib, sqlite3; print('‚úÖ Todas las dependencias OK')`"" -ForegroundColor Cyan

Write-Host "`n" -ForegroundColor White
Write-Host "üí° TIPS:" -ForegroundColor Magenta
Write-Host "   ‚Ä¢ Los vol√∫menes (-v) mantienen los datos persistentes" -ForegroundColor White
Write-Host "   ‚Ä¢ Usa --rm para auto-eliminar contenedores al terminar" -ForegroundColor White
Write-Host "   ‚Ä¢ Las gr√°ficas se guardan en ./Graphics/" -ForegroundColor White
Write-Host "   ‚Ä¢ La BD SQLite se guarda en ./Files/etl_data.db" -ForegroundColor White